<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.nhnacademy.bookstore.purchase.purchaseBook.repository.PurchaseBookRepositoryTest" time="1.271" tests="2" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/test-classes:/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/classes:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.3.0/spring-boot-starter-web-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter/3.3.0/spring-boot-starter-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot/3.3.0/spring-boot-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.3.0/spring-boot-autoconfigure-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.3.0/spring-boot-starter-logging-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/ch/qos/logback/logback-classic/1.5.6/logback-classic-1.5.6.jar:/Users/jeongjuhyeok/.m2/repository/ch/qos/logback/logback-core/1.5.6/logback-core-1.5.6.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.23.1/log4j-to-slf4j-2.23.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/logging/log4j/log4j-api/2.23.1/log4j-api-2.23.1.jar:/Users/jeongjuhyeok/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/jeongjuhyeok/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.3.0/spring-boot-starter-json-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.17.1/jackson-datatype-jdk8-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.17.1/jackson-datatype-jsr310-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.17.1/jackson-module-parameter-names-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.3.0/spring-boot-starter-tomcat-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.24/tomcat-embed-core-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.24/tomcat-embed-websocket-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-web/6.1.8/spring-web-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-beans/6.1.8/spring-beans-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/io/micrometer/micrometer-observation/1.13.0/micrometer-observation-1.13.0.jar:/Users/jeongjuhyeok/.m2/repository/io/micrometer/micrometer-commons/1.13.0/micrometer-commons-1.13.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-webmvc/6.1.8/spring-webmvc-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-aop/6.1.8/spring-aop-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-expression/6.1.8/spring-expression-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-eureka-client/4.1.2/spring-cloud-starter-netflix-eureka-client-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter/4.1.3/spring-cloud-starter-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-context/4.1.3/spring-cloud-context-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/security/spring-security-rsa/1.1.3/spring-security-rsa-1.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/bouncycastle/bcprov-jdk18on/1.78/bcprov-jdk18on-1.78.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-netflix-eureka-client/4.1.2/spring-cloud-netflix-eureka-client-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/eureka/eureka-client/2.0.2/eureka-client-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/netflix-commons/netflix-eventbus/0.3.0/netflix-eventbus-0.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/netflix-commons/netflix-infix/0.3.0/netflix-infix-0.3.0.jar:/Users/jeongjuhyeok/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar:/Users/jeongjuhyeok/.m2/repository/joda-time/joda-time/2.3/joda-time-2.3.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar:/Users/jeongjuhyeok/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/jeongjuhyeok/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/jeongjuhyeok/.m2/repository/com/thoughtworks/xstream/xstream/1.4.19/xstream-1.4.19.jar:/Users/jeongjuhyeok/.m2/repository/io/github/x-stream/mxparser/1.2.2/mxparser-1.2.2.jar:/Users/jeongjuhyeok/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/servo/servo-core/0.12.21/servo-core-0.12.21.jar:/Users/jeongjuhyeok/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar:/Users/jeongjuhyeok/.m2/repository/commons-configuration/commons-configuration/1.10/commons-configuration-1.10.jar:/Users/jeongjuhyeok/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/jeongjuhyeok/.m2/repository/org/codehaus/jettison/jettison/1.5.4/jettison-1.5.4.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/eureka/eureka-core/2.0.2/eureka-core-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/woodstox/woodstox-core/6.2.1/woodstox-core-6.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-loadbalancer/4.1.3/spring-cloud-starter-loadbalancer-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-loadbalancer/4.1.3/spring-cloud-loadbalancer-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/io/projectreactor/reactor-core/3.6.6/reactor-core-3.6.6.jar:/Users/jeongjuhyeok/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/jeongjuhyeok/.m2/repository/io/projectreactor/addons/reactor-extra/3.5.1/reactor-extra-3.5.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-cache/3.3.0/spring-boot-starter-cache-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-context-support/6.1.8/spring-context-support-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/com/stoyanr/evictor/1.0.0/evictor-1.0.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-openfeign/4.1.2/spring-cloud-starter-openfeign-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-openfeign-core/4.1.2/spring-cloud-openfeign-core-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/form/feign-form-spring/3.8.0/feign-form-spring-3.8.0.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/form/feign-form/3.8.0/feign-form-3.8.0.jar:/Users/jeongjuhyeok/.m2/repository/commons-fileupload/commons-fileupload/1.5/commons-fileupload-1.5.jar:/Users/jeongjuhyeok/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-commons/4.1.3/spring-cloud-commons-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/security/spring-security-crypto/6.3.0/spring-security-crypto-6.3.0.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/feign-core/13.2.1/feign-core-13.2.1.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/feign-slf4j/13.2.1/feign-slf4j-13.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.3.0/spring-boot-starter-data-jpa-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.3.0/spring-boot-starter-aop-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.3.0/spring-boot-starter-jdbc-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-jdbc/6.1.8/spring-jdbc-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/jeongjuhyeok/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/jeongjuhyeok/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/jeongjuhyeok/.m2/repository/net/bytebuddy/byte-buddy/1.14.16/byte-buddy-1.14.16.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-jpa/3.3.0/spring-data-jpa-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-orm/6.1.8/spring-orm-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-aspects/6.1.8/spring-aspects-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-elasticsearch/5.3.1/spring-data-elasticsearch-5.3.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-context/6.1.8/spring-context-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-tx/6.1.8/spring-tx-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-commons/3.3.0/spring-data-commons-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/co/elastic/clients/elasticsearch-java/8.13.4/elasticsearch-java-8.13.4.jar:/Users/jeongjuhyeok/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/json/jakarta.json-api/2.1.3/jakarta.json-api-2.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/eclipse/parsson/parsson/1.0.5/parsson-1.0.5.jar:/Users/jeongjuhyeok/.m2/repository/io/opentelemetry/opentelemetry-api/1.37.0/opentelemetry-api-1.37.0.jar:/Users/jeongjuhyeok/.m2/repository/io/opentelemetry/opentelemetry-context/1.37.0/opentelemetry-context-1.37.0.jar:/Users/jeongjuhyeok/.m2/repository/org/elasticsearch/client/elasticsearch-rest-client/8.13.4/elasticsearch-rest-client-8.13.4.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.1.5/httpasyncclient-4.1.5.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.4.16/httpcore-nio-4.4.16.jar:/Users/jeongjuhyeok/.m2/repository/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.17.1/jackson-core-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.17.1/jackson-databind-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.17.1/jackson-annotations-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.3.0/spring-boot-starter-test-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-test/3.3.0/spring-boot-test-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.3.0/spring-boot-test-autoconfigure-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/jeongjuhyeok/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/jeongjuhyeok/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/jeongjuhyeok/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/jeongjuhyeok/.m2/repository/org/assertj/assertj-core/3.25.3/assertj-core-3.25.3.jar:/Users/jeongjuhyeok/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/mockito/mockito-core/5.11.0/mockito-core-5.11.0.jar:/Users/jeongjuhyeok/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.16/byte-buddy-agent-1.14.16.jar:/Users/jeongjuhyeok/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/jeongjuhyeok/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/jeongjuhyeok/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/jeongjuhyeok/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-core/6.1.8/spring-core-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-jcl/6.1.8/spring-jcl-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-test/6.1.8/spring-test-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-data-rest/3.3.0/spring-boot-starter-data-rest-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-rest-webmvc/4.3.0/spring-data-rest-webmvc-4.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-rest-core/4.3.0/spring-data-rest-core-4.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/hateoas/spring-hateoas/2.3.0/spring-hateoas-2.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/plugin/spring-plugin-core/3.0.0/spring-plugin-core-3.0.0.jar:/Users/jeongjuhyeok/.m2/repository/org/atteo/evo-inflector/1.3/evo-inflector-1.3.jar:/Users/jeongjuhyeok/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/jeongjuhyeok/.m2/repository/org/projectlombok/lombok/1.18.32/lombok-1.18.32.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.3.0/spring-boot-starter-validation-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.24/tomcat-embed-el-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/mysql/mysql-connector-j/8.3.0/mysql-connector-j-8.3.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="Asia/Seoul"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="KR"/>
    <property name="sun.boot.library.path" value="/Users/jeongjuhyeok/Library/Java/JavaVirtualMachines/corretto-21.0.3/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/surefire/surefirebooter-20240621133543494_3.jar /Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/surefire 2024-06-21T13-35-43_457-jvmRun1 surefire-20240621133543494_1tmp surefire_0-20240621133543494_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/test-classes:/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/classes:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.3.0/spring-boot-starter-web-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter/3.3.0/spring-boot-starter-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot/3.3.0/spring-boot-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.3.0/spring-boot-autoconfigure-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.3.0/spring-boot-starter-logging-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/ch/qos/logback/logback-classic/1.5.6/logback-classic-1.5.6.jar:/Users/jeongjuhyeok/.m2/repository/ch/qos/logback/logback-core/1.5.6/logback-core-1.5.6.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.23.1/log4j-to-slf4j-2.23.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/logging/log4j/log4j-api/2.23.1/log4j-api-2.23.1.jar:/Users/jeongjuhyeok/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/jeongjuhyeok/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.3.0/spring-boot-starter-json-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.17.1/jackson-datatype-jdk8-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.17.1/jackson-datatype-jsr310-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.17.1/jackson-module-parameter-names-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.3.0/spring-boot-starter-tomcat-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.24/tomcat-embed-core-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.24/tomcat-embed-websocket-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-web/6.1.8/spring-web-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-beans/6.1.8/spring-beans-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/io/micrometer/micrometer-observation/1.13.0/micrometer-observation-1.13.0.jar:/Users/jeongjuhyeok/.m2/repository/io/micrometer/micrometer-commons/1.13.0/micrometer-commons-1.13.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-webmvc/6.1.8/spring-webmvc-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-aop/6.1.8/spring-aop-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-expression/6.1.8/spring-expression-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-eureka-client/4.1.2/spring-cloud-starter-netflix-eureka-client-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter/4.1.3/spring-cloud-starter-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-context/4.1.3/spring-cloud-context-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/security/spring-security-rsa/1.1.3/spring-security-rsa-1.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/bouncycastle/bcprov-jdk18on/1.78/bcprov-jdk18on-1.78.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-netflix-eureka-client/4.1.2/spring-cloud-netflix-eureka-client-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/client5/httpclient5/5.3.1/httpclient5-5.3.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/core5/httpcore5/5.2.4/httpcore5-5.2.4.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/core5/httpcore5-h2/5.2.4/httpcore5-h2-5.2.4.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/eureka/eureka-client/2.0.2/eureka-client-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/netflix-commons/netflix-eventbus/0.3.0/netflix-eventbus-0.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/netflix-commons/netflix-infix/0.3.0/netflix-infix-0.3.0.jar:/Users/jeongjuhyeok/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar:/Users/jeongjuhyeok/.m2/repository/joda-time/joda-time/2.3/joda-time-2.3.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar:/Users/jeongjuhyeok/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/jeongjuhyeok/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/jeongjuhyeok/.m2/repository/com/thoughtworks/xstream/xstream/1.4.19/xstream-1.4.19.jar:/Users/jeongjuhyeok/.m2/repository/io/github/x-stream/mxparser/1.2.2/mxparser-1.2.2.jar:/Users/jeongjuhyeok/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/3.1.0/jakarta.ws.rs-api-3.1.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/servo/servo-core/0.12.21/servo-core-0.12.21.jar:/Users/jeongjuhyeok/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar:/Users/jeongjuhyeok/.m2/repository/commons-configuration/commons-configuration/1.10/commons-configuration-1.10.jar:/Users/jeongjuhyeok/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/jeongjuhyeok/.m2/repository/org/codehaus/jettison/jettison/1.5.4/jettison-1.5.4.jar:/Users/jeongjuhyeok/.m2/repository/com/netflix/eureka/eureka-core/2.0.2/eureka-core-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/woodstox/woodstox-core/6.2.1/woodstox-core-6.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-loadbalancer/4.1.3/spring-cloud-starter-loadbalancer-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-loadbalancer/4.1.3/spring-cloud-loadbalancer-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/io/projectreactor/reactor-core/3.6.6/reactor-core-3.6.6.jar:/Users/jeongjuhyeok/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/jeongjuhyeok/.m2/repository/io/projectreactor/addons/reactor-extra/3.5.1/reactor-extra-3.5.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-cache/3.3.0/spring-boot-starter-cache-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-context-support/6.1.8/spring-context-support-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/com/stoyanr/evictor/1.0.0/evictor-1.0.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-starter-openfeign/4.1.2/spring-cloud-starter-openfeign-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-openfeign-core/4.1.2/spring-cloud-openfeign-core-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/form/feign-form-spring/3.8.0/feign-form-spring-3.8.0.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/form/feign-form/3.8.0/feign-form-3.8.0.jar:/Users/jeongjuhyeok/.m2/repository/commons-fileupload/commons-fileupload/1.5/commons-fileupload-1.5.jar:/Users/jeongjuhyeok/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/cloud/spring-cloud-commons/4.1.3/spring-cloud-commons-4.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/security/spring-security-crypto/6.3.0/spring-security-crypto-6.3.0.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/feign-core/13.2.1/feign-core-13.2.1.jar:/Users/jeongjuhyeok/.m2/repository/io/github/openfeign/feign-slf4j/13.2.1/feign-slf4j-13.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.3.0/spring-boot-starter-data-jpa-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.3.0/spring-boot-starter-aop-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.3.0/spring-boot-starter-jdbc-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-jdbc/6.1.8/spring-jdbc-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/jeongjuhyeok/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/jeongjuhyeok/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/jeongjuhyeok/.m2/repository/net/bytebuddy/byte-buddy/1.14.16/byte-buddy-1.14.16.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/jeongjuhyeok/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/jeongjuhyeok/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-jpa/3.3.0/spring-data-jpa-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-orm/6.1.8/spring-orm-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-aspects/6.1.8/spring-aspects-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-elasticsearch/5.3.1/spring-data-elasticsearch-5.3.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-context/6.1.8/spring-context-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-tx/6.1.8/spring-tx-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-commons/3.3.0/spring-data-commons-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/co/elastic/clients/elasticsearch-java/8.13.4/elasticsearch-java-8.13.4.jar:/Users/jeongjuhyeok/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/json/jakarta.json-api/2.1.3/jakarta.json-api-2.1.3.jar:/Users/jeongjuhyeok/.m2/repository/org/eclipse/parsson/parsson/1.0.5/parsson-1.0.5.jar:/Users/jeongjuhyeok/.m2/repository/io/opentelemetry/opentelemetry-api/1.37.0/opentelemetry-api-1.37.0.jar:/Users/jeongjuhyeok/.m2/repository/io/opentelemetry/opentelemetry-context/1.37.0/opentelemetry-context-1.37.0.jar:/Users/jeongjuhyeok/.m2/repository/org/elasticsearch/client/elasticsearch-rest-client/8.13.4/elasticsearch-rest-client-8.13.4.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.1.5/httpasyncclient-4.1.5.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.4.16/httpcore-nio-4.4.16.jar:/Users/jeongjuhyeok/.m2/repository/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.17.1/jackson-core-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.17.1/jackson-databind-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.17.1/jackson-annotations-2.17.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.3.0/spring-boot-starter-test-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-test/3.3.0/spring-boot-test-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.3.0/spring-boot-test-autoconfigure-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/jeongjuhyeok/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/jeongjuhyeok/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/jeongjuhyeok/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/jeongjuhyeok/.m2/repository/org/assertj/assertj-core/3.25.3/assertj-core-3.25.3.jar:/Users/jeongjuhyeok/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/jeongjuhyeok/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/jeongjuhyeok/.m2/repository/org/mockito/mockito-core/5.11.0/mockito-core-5.11.0.jar:/Users/jeongjuhyeok/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.16/byte-buddy-agent-1.14.16.jar:/Users/jeongjuhyeok/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/jeongjuhyeok/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/jeongjuhyeok/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/jeongjuhyeok/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-core/6.1.8/spring-core-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-jcl/6.1.8/spring-jcl-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/spring-test/6.1.8/spring-test-6.1.8.jar:/Users/jeongjuhyeok/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-data-rest/3.3.0/spring-boot-starter-data-rest-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-rest-webmvc/4.3.0/spring-data-rest-webmvc-4.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/data/spring-data-rest-core/4.3.0/spring-data-rest-core-4.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/hateoas/spring-hateoas/2.3.0/spring-hateoas-2.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/plugin/spring-plugin-core/3.0.0/spring-plugin-core-3.0.0.jar:/Users/jeongjuhyeok/.m2/repository/org/atteo/evo-inflector/1.3/evo-inflector-1.3.jar:/Users/jeongjuhyeok/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/jeongjuhyeok/.m2/repository/org/projectlombok/lombok/1.18.32/lombok-1.18.32.jar:/Users/jeongjuhyeok/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.3.0/spring-boot-starter-validation-3.3.0.jar:/Users/jeongjuhyeok/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.24/tomcat-embed-el-10.1.24.jar:/Users/jeongjuhyeok/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/jeongjuhyeok/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/jeongjuhyeok/.m2/repository/com/mysql/mysql-connector-j/8.3.0/mysql-connector-j-8.3.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/jeongjuhyeok"/>
    <property name="user.language" value="ko"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-04-16"/>
    <property name="java.home" value="/Users/jeongjuhyeok/Library/Java/JavaVirtualMachines/corretto-21.0.3/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore/target/surefire/surefirebooter-20240621133543494_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="21.0.3+9-LTS"/>
    <property name="user.name" value="jeongjuhyeok"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="14.4.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-21.0.3.9.1"/>
    <property name="localRepository" value="/Users/jeongjuhyeok/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-21/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/l4/sc3f2nb13t55_w16hcpccqv80000gn/T/"/>
    <property name="idea.version" value="2024.1"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="21.0.3"/>
    <property name="user.dir" value="/Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="13201"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/jeongjuhyeok/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="21.0.3+9-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[3runner-bookstore] "/>
  </properties>
  <testcase name="testFindAllByPurchaseId" classname="com.nhnacademy.bookstore.purchase.purchaseBook.repository.PurchaseBookRepositoryTest" time="0.121">
    <system-out><![CDATA[2024-06-21T13:35:48.481+09:00  INFO 13201 --- [3runner-bookstore] [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.nhnacademy.bookstore.purchase.purchaseBook.repository.PurchaseBookRepositoryTest]: PurchaseBookRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-06-21T13:35:48.513+09:00  INFO 13201 --- [3runner-bookstore] [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.nhnacademy.bookstore.Application for test class com.nhnacademy.bookstore.purchase.purchaseBook.repository.PurchaseBookRepositoryTest
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.0)

2024-06-21T13:35:48.544+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : Starting PurchaseBookRepositoryTest using Java 21.0.3 with PID 13201 (started by jeongjuhyeok in /Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore)
2024-06-21T13:35:48.544+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : The following 1 profile is active: "dev"
2024-06-21T13:35:48.622+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2024-06-21T13:35:48.622+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-21T13:35:48.646+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24 ms. Found 26 JPA repository interfaces.
2024-06-21T13:35:48.664+09:00  INFO 13201 --- [3runner-bookstore] [           main] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2024-06-21T13:35:48.679+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:1daf9a22-fe63-4447-9f4f-7a24de67ebb0;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-06-21T13:35:48.801+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-21T13:35:48.802+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-06-21T13:35:48.807+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-21T13:35:49.055+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: create table address (id bigint generated by default as identity, city varchar(100) not null, country varchar(100) not null, name varchar(20) not null, postal_code varchar(20) not null, road varchar(100) not null, state varchar(100) not null, member_id bigint not null, primary key (id))
Hibernate: create table auth (id bigint generated by default as identity, name varchar(50), primary key (id))
Hibernate: create table book (id bigint generated by default as identity, author varchar(50) not null, created_at timestamp(6) with time zone not null, description TEXT, isbn varchar(20) not null, packing boolean not null, price integer not null check (price>=0), published_date timestamp(6) with time zone, publisher varchar(50) not null, quantity integer not null check (quantity>=0), selling_price integer not null check (selling_price>=0), title varchar(50) not null, view_count int default 0 not null check (view_count>=0), primary key (id))
Hibernate: create table book_cart (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, quantity int default 0 not null check (quantity>=0), book_id bigint, cart_id bigint, primary key (id))
Hibernate: create table book_category (id bigint generated by default as identity, book_id bigint, category_id bigint, primary key (id))
Hibernate: create table book_image (type tinyint not null check (type between 0 and 2), url varchar(50) not null, book_id bigint not null, primary key (book_id))
Hibernate: create table book_like (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, book_id bigint, member_id bigint, primary key (id))
Hibernate: create table book_tag (id bigint generated by default as identity, book_id bigint, tag_id bigint, primary key (id))
Hibernate: create table cart (id bigint generated by default as identity, member_id bigint, primary key (id))
Hibernate: create table category (id bigint generated by default as identity, name varchar(30) not null, parent_id bigint, primary key (id))
Hibernate: create table comment (id bigint generated by default as identity, content varchar(100) not null, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, status tinyint not null check (status between 0 and 1), updated_at timestamp(6) with time zone, member_id bigint, review_id bigint not null, primary key (id))
Hibernate: create table coupon (id bigint generated by default as identity, coupon_form_id bigint not null, coupon_status tinyint not null check (coupon_status between 0 and 1), issued_at timestamp(6) with time zone not null, member_id bigint, primary key (id))
Hibernate: create table member (id bigint generated by default as identity, age integer not null, birthday timestamp(6) with time zone, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, email varchar(255) not null, grade tinyint not null check (grade between 0 and 3), last_login_date timestamp(6) with time zone, modified_at timestamp(6) with time zone, name varchar(10) not null, password varchar(50) not null, phone varchar(11) not null, point bigint not null, status tinyint not null check (status between 0 and 2), primary key (id))
Hibernate: create table member_auth (id bigint generated by default as identity, auth_id bigint not null, member_id bigint not null, primary key (id))
Hibernate: create table payment (id bigint generated by default as identity, paid_at timestamp(6) with time zone not null, payment_status tinyint check (payment_status between 0 and 2), payment_type_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table payment_type (id bigint generated by default as identity, name varchar(50), primary key (id))
Hibernate: create table point_record (id bigint generated by default as identity, content varchar(100) not null, created_at timestamp(6) with time zone not null, member_point bigint not null, remnant_point bigint not null, member_id bigint not null, primary key (id))
Hibernate: create table purchase (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, delivery_price integer not null, member_type tinyint not null check (member_type between 0 and 1), order_number uuid not null, password varchar(255), road varchar(255) not null, status tinyint not null check (status between 0 and 1), total_price integer not null, member_id bigint, point_record_id bigint, primary key (id))
Hibernate: create table purchase_book (id bigint generated by default as identity, price integer not null check (price>=0), quantity integer not null check (quantity>=0), book_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table purchase_coupon (id bigint generated by default as identity, discount_price integer not null, coupon_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table refund (id bigint generated by default as identity, price integer not null, refund_content varchar(255), refund_status tinyint check (refund_status between 0 and 2), purchase_id bigint, primary key (id))
Hibernate: create table review (id bigint generated by default as identity, content varchar(200) not null, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, deleted_reason varchar(100), rating float(53) not null, review_status tinyint check (review_status between 0 and 1), title varchar(50) not null, updated_at timestamp(6) with time zone, purchase_book_id bigint, primary key (id))
Hibernate: create table review_image (id bigint generated by default as identity, url varchar(50) not null, review_id bigint not null, primary key (id))
Hibernate: create table review_like (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, member_id bigint, review_id bigint, primary key (id))
Hibernate: create table simple_review (content varchar(100) not null, created_at timestamp(6) with time zone not null, updated_at timestamp(6) with time zone, purchase_book_id bigint not null, primary key (purchase_book_id))
Hibernate: create table tag (id bigint generated by default as identity, name varchar(100) not null, primary key (id))
Hibernate: alter table if exists book_image drop constraint if exists UKrkpoh2q56k70tgcb8c2by0g37
Hibernate: alter table if exists book_image add constraint UKrkpoh2q56k70tgcb8c2by0g37 unique (url)
Hibernate: alter table if exists cart drop constraint if exists UK7dds3r67nkhxm9sbs9r5obd46
Hibernate: alter table if exists cart add constraint UK7dds3r67nkhxm9sbs9r5obd46 unique (member_id)
Hibernate: alter table if exists comment drop constraint if exists UK14fio2len8ouxyg2a1ixn2qhv
Hibernate: alter table if exists comment add constraint UK14fio2len8ouxyg2a1ixn2qhv unique (member_id)
Hibernate: alter table if exists purchase drop constraint if exists UK9yfe1qfmymvixk9undapnll08
Hibernate: alter table if exists purchase add constraint UK9yfe1qfmymvixk9undapnll08 unique (order_number)
Hibernate: alter table if exists purchase drop constraint if exists UK1w34ki8lo8aywns22fyl9g0ex
Hibernate: alter table if exists purchase add constraint UK1w34ki8lo8aywns22fyl9g0ex unique (point_record_id)
Hibernate: alter table if exists purchase_book drop constraint if exists UKq73u59c3kue49qmd7qfaqrggv
Hibernate: alter table if exists purchase_book add constraint UKq73u59c3kue49qmd7qfaqrggv unique (book_id)
Hibernate: alter table if exists review drop constraint if exists UK88tdjkfb4s2en3wgucmetsbk2
Hibernate: alter table if exists review add constraint UK88tdjkfb4s2en3wgucmetsbk2 unique (purchase_book_id)
Hibernate: alter table if exists review_image drop constraint if exists UKcqjchusv51i0of5p6noe5p17r
Hibernate: alter table if exists review_image add constraint UKcqjchusv51i0of5p6noe5p17r unique (url)
Hibernate: alter table if exists address add constraint FKcnw0s8hudme00qu71e3mqd5ih foreign key (member_id) references member
Hibernate: alter table if exists book_cart add constraint FKtmfgsp2mapbb50qerjo1ngm97 foreign key (book_id) references book
Hibernate: alter table if exists book_cart add constraint FKjirkaf305sr0bus6d1vow11jd foreign key (cart_id) references cart
Hibernate: alter table if exists book_category add constraint FKnyegcbpvce2mnmg26h0i856fd foreign key (book_id) references book
Hibernate: alter table if exists book_category add constraint FKam8llderp40mvbbwceqpu6l2s foreign key (category_id) references category
Hibernate: alter table if exists book_image add constraint FKh020sno0rk91annvrd960urno foreign key (book_id) references book
Hibernate: alter table if exists book_like add constraint FK7i3otcp1nj1ou9gdr7nv1lv0e foreign key (book_id) references book
Hibernate: alter table if exists book_like add constraint FK26d074yixkk7gfb7vd4g5glyj foreign key (member_id) references member
Hibernate: alter table if exists book_tag add constraint FKdrc33u5ufw8rdvajeveowgx7g foreign key (book_id) references book
Hibernate: alter table if exists book_tag add constraint FKrxw4xl05l6ns1763bq284e7m2 foreign key (tag_id) references tag
Hibernate: alter table if exists cart add constraint FKix170nytunweovf2v9137mx2o foreign key (member_id) references member
Hibernate: alter table if exists category add constraint FK2y94svpmqttx80mshyny85wqr foreign key (parent_id) references category
Hibernate: alter table if exists comment add constraint FKmrrrpi513ssu63i2783jyiv9m foreign key (member_id) references member
Hibernate: alter table if exists comment add constraint FKnf4ni761w29tmtgdxymmgvg8r foreign key (review_id) references review
Hibernate: alter table if exists coupon add constraint FK97ly69kp7juvoienofq00qaph foreign key (member_id) references member
Hibernate: alter table if exists member_auth add constraint FK66uc2xroefrsdkd5xihg5oyjf foreign key (auth_id) references auth
Hibernate: alter table if exists member_auth add constraint FKrft808ju8f7v8vhmei565dc4u foreign key (member_id) references member
Hibernate: alter table if exists payment add constraint FKkvolsaw3e4jg4ra05vu135cj9 foreign key (payment_type_id) references payment_type
Hibernate: alter table if exists payment add constraint FKmm2h9p8cpu4741lwxyn2fnpgg foreign key (purchase_id) references purchase
Hibernate: alter table if exists point_record add constraint FKirxm53it5dgmmu9bl6mepinnx foreign key (member_id) references member
Hibernate: alter table if exists purchase add constraint FKq9jpnu7wc1b02gnol85hw9su2 foreign key (member_id) references member
Hibernate: alter table if exists purchase add constraint FKb3ad9pb5elsb07gsxb7k8h6nh foreign key (point_record_id) references point_record
Hibernate: alter table if exists purchase_book add constraint FKdhpunimwngwnxolqft1svdwph foreign key (book_id) references book
Hibernate: alter table if exists purchase_book add constraint FKqreoqdobvpr39lkxlyv7n66st foreign key (purchase_id) references purchase
Hibernate: alter table if exists purchase_coupon add constraint FK9o3wf5e5gvu87f62vapfma8by foreign key (coupon_id) references coupon
Hibernate: alter table if exists purchase_coupon add constraint FKajhlo2cni1x4bjiisqi4i3620 foreign key (purchase_id) references purchase
Hibernate: alter table if exists refund add constraint FKn6hygqb7v8me2nthibetqp245 foreign key (purchase_id) references purchase
Hibernate: alter table if exists review add constraint FKphmamk3jpdov2m1ncrwenu8e2 foreign key (purchase_book_id) references purchase_book
Hibernate: alter table if exists review_image add constraint FK16wp089tx9nm0obc217gvdd6l foreign key (review_id) references review
Hibernate: alter table if exists review_like add constraint FKf19ep4u0vm5vietilw2kp9jo2 foreign key (member_id) references member
Hibernate: alter table if exists review_like add constraint FK68am9vk1s1e8n1v873meqkk0k foreign key (review_id) references review
Hibernate: alter table if exists simple_review add constraint FKhn2ol6nvdpxi1u79qcl0anoia foreign key (purchase_book_id) references purchase_book
2024-06-21T13:35:49.102+09:00  INFO 13201 --- [3runner-bookstore] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-21T13:35:49.194+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : Started PurchaseBookRepositoryTest in 0.679 seconds (process running for 5.655)
2024-06-21T13:35:49.206+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: insert into book (author,created_at,description,isbn,packing,price,published_date,publisher,quantity,selling_price,title,view_count,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
2024-06-21T13:35:49.223+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:VARCHAR) <- [Sample Author]
2024-06-21T13:35:49.223+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP_WITH_TIMEZONE) <- [2024-06-21T13:35:49.210044+09:00[Asia/Seoul]]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:CLOB) <- [This is a description of the sample book.]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:VARCHAR) <- [1234567890123]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:BOOLEAN) <- [true]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:INTEGER) <- [1500]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:TIMESTAMP_WITH_TIMEZONE) <- [2024-04-21T13:35:49.204468+09:00[Asia/Seoul]]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (8:VARCHAR) <- [Sample Publisher]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (9:INTEGER) <- [100]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (10:INTEGER) <- [1200]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (11:VARCHAR) <- [Sample Book Title]
2024-06-21T13:35:49.226+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (12:INTEGER) <- [0]
2024-06-21T13:35:49.242+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.242+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: select p1_0.id,p1_0.created_at,p1_0.delivery_price,m1_0.id,m1_0.age,m1_0.birthday,m1_0.created_at,m1_0.deleted_at,m1_0.email,m1_0.grade,m1_0.last_login_date,m1_0.modified_at,m1_0.name,m1_0.password,m1_0.phone,m1_0.point,m1_0.status,al1_0.member_id,al1_0.id,al1_0.city,al1_0.country,al1_0.name,al1_0.postal_code,al1_0.road,al1_0.state,p1_0.member_type,p1_0.order_number,p1_0.password,pr1_0.id,pr1_0.content,pr1_0.created_at,pr1_0.member_id,m3_0.id,m3_0.age,m3_0.birthday,m3_0.created_at,m3_0.deleted_at,m3_0.email,m3_0.grade,m3_0.last_login_date,m3_0.modified_at,m3_0.name,m3_0.password,m3_0.phone,m3_0.point,m3_0.status,pr1_0.member_point,pr1_0.remnant_point,p1_0.road,p1_0.status,p1_0.total_price from purchase p1_0 left join member m1_0 on m1_0.id=p1_0.member_id left join address al1_0 on m1_0.id=al1_0.member_id left join point_record pr1_0 on pr1_0.id=p1_0.point_record_id left join member m3_0 on m3_0.id=pr1_0.member_id where p1_0.id=?
2024-06-21T13:35:49.255+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
Hibernate: insert into purchase (created_at,delivery_price,member_id,member_type,order_number,password,point_record_id,road,status,total_price,id) values (?,?,?,?,?,?,?,?,?,?,default)
2024-06-21T13:35:49.259+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:TIMESTAMP_WITH_TIMEZONE) <- [2024-06-21T13:35:49.242511+09:00[Asia/Seoul]]
2024-06-21T13:35:49.259+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:INTEGER) <- [10]
2024-06-21T13:35:49.259+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:BIGINT) <- [null]
2024-06-21T13:35:49.259+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:TINYINT) <- [MEMBER]
2024-06-21T13:35:49.260+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:UUID) <- [d5daf6b9-a0d0-445f-ac52-2f69ceab49af]
2024-06-21T13:35:49.261+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:VARCHAR) <- [null]
2024-06-21T13:35:49.261+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:BIGINT) <- [null]
2024-06-21T13:35:49.261+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (8:VARCHAR) <- [hhh]
2024-06-21T13:35:49.261+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (9:TINYINT) <- [SHIPPED]
2024-06-21T13:35:49.261+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (10:INTEGER) <- [10]
2024-06-21T13:35:49.264+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.264+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: insert into purchase_book (book_id,price,purchase_id,quantity,id) values (?,?,?,?,default)
2024-06-21T13:35:49.265+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
2024-06-21T13:35:49.265+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:INTEGER) <- [1000]
2024-06-21T13:35:49.265+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:BIGINT) <- [1]
2024-06-21T13:35:49.265+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:INTEGER) <- [10]
2024-06-21T13:35:49.265+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.266+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : No need to create transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAllByPurchaseId]: This method is not transactional.
Hibernate: select pb1_0.id,pb1_0.book_id,pb1_0.price,pb1_0.purchase_id,pb1_0.quantity from purchase_book pb1_0 where pb1_0.purchase_id=?
2024-06-21T13:35:49.310+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
2024-06-21T13:35:49.316+09:00  INFO 13201 --- [3runner-bookstore] [           main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
]]></system-out>
  </testcase>
  <testcase name="testFindByPurchaseIdAndBookId" classname="com.nhnacademy.bookstore.purchase.purchaseBook.repository.PurchaseBookRepositoryTest" time="0.015">
    <system-out><![CDATA[  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.0)

2024-06-21T13:35:49.335+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : Starting PurchaseBookRepositoryTest using Java 21.0.3 with PID 13201 (started by jeongjuhyeok in /Users/jeongjuhyeok/Desktop/3runner/3runner-bookstore/3runner-bookstore)
2024-06-21T13:35:49.335+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : The following 1 profile is active: "dev"
2024-06-21T13:35:49.380+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2024-06-21T13:35:49.380+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-21T13:35:49.395+09:00  INFO 13201 --- [3runner-bookstore] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14 ms. Found 26 JPA repository interfaces.
2024-06-21T13:35:49.405+09:00  INFO 13201 --- [3runner-bookstore] [           main] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2024-06-21T13:35:49.414+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:20053382-049e-457f-8e8a-792dc6dd7469;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-06-21T13:35:49.427+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-21T13:35:49.428+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-06-21T13:35:49.433+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-21T13:35:49.618+09:00  INFO 13201 --- [3runner-bookstore] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: create table address (id bigint generated by default as identity, city varchar(100) not null, country varchar(100) not null, name varchar(20) not null, postal_code varchar(20) not null, road varchar(100) not null, state varchar(100) not null, member_id bigint not null, primary key (id))
Hibernate: create table auth (id bigint generated by default as identity, name varchar(50), primary key (id))
Hibernate: create table book (id bigint generated by default as identity, author varchar(50) not null, created_at timestamp(6) with time zone not null, description TEXT, isbn varchar(20) not null, packing boolean not null, price integer not null check (price>=0), published_date timestamp(6) with time zone, publisher varchar(50) not null, quantity integer not null check (quantity>=0), selling_price integer not null check (selling_price>=0), title varchar(50) not null, view_count int default 0 not null check (view_count>=0), primary key (id))
Hibernate: create table book_cart (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, quantity int default 0 not null check (quantity>=0), book_id bigint, cart_id bigint, primary key (id))
Hibernate: create table book_category (id bigint generated by default as identity, book_id bigint, category_id bigint, primary key (id))
Hibernate: create table book_image (type tinyint not null check (type between 0 and 2), url varchar(50) not null, book_id bigint not null, primary key (book_id))
Hibernate: create table book_like (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, book_id bigint, member_id bigint, primary key (id))
Hibernate: create table book_tag (id bigint generated by default as identity, book_id bigint, tag_id bigint, primary key (id))
Hibernate: create table cart (id bigint generated by default as identity, member_id bigint, primary key (id))
Hibernate: create table category (id bigint generated by default as identity, name varchar(30) not null, parent_id bigint, primary key (id))
Hibernate: create table comment (id bigint generated by default as identity, content varchar(100) not null, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, status tinyint not null check (status between 0 and 1), updated_at timestamp(6) with time zone, member_id bigint, review_id bigint not null, primary key (id))
Hibernate: create table coupon (id bigint generated by default as identity, coupon_form_id bigint not null, coupon_status tinyint not null check (coupon_status between 0 and 1), issued_at timestamp(6) with time zone not null, member_id bigint, primary key (id))
Hibernate: create table member (id bigint generated by default as identity, age integer not null, birthday timestamp(6) with time zone, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, email varchar(255) not null, grade tinyint not null check (grade between 0 and 3), last_login_date timestamp(6) with time zone, modified_at timestamp(6) with time zone, name varchar(10) not null, password varchar(50) not null, phone varchar(11) not null, point bigint not null, status tinyint not null check (status between 0 and 2), primary key (id))
Hibernate: create table member_auth (id bigint generated by default as identity, auth_id bigint not null, member_id bigint not null, primary key (id))
Hibernate: create table payment (id bigint generated by default as identity, paid_at timestamp(6) with time zone not null, payment_status tinyint check (payment_status between 0 and 2), payment_type_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table payment_type (id bigint generated by default as identity, name varchar(50), primary key (id))
Hibernate: create table point_record (id bigint generated by default as identity, content varchar(100) not null, created_at timestamp(6) with time zone not null, member_point bigint not null, remnant_point bigint not null, member_id bigint not null, primary key (id))
Hibernate: create table purchase (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, delivery_price integer not null, member_type tinyint not null check (member_type between 0 and 1), order_number uuid not null, password varchar(255), road varchar(255) not null, status tinyint not null check (status between 0 and 1), total_price integer not null, member_id bigint, point_record_id bigint, primary key (id))
Hibernate: create table purchase_book (id bigint generated by default as identity, price integer not null check (price>=0), quantity integer not null check (quantity>=0), book_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table purchase_coupon (id bigint generated by default as identity, discount_price integer not null, coupon_id bigint, purchase_id bigint, primary key (id))
Hibernate: create table refund (id bigint generated by default as identity, price integer not null, refund_content varchar(255), refund_status tinyint check (refund_status between 0 and 2), purchase_id bigint, primary key (id))
Hibernate: create table review (id bigint generated by default as identity, content varchar(200) not null, created_at timestamp(6) with time zone not null, deleted_at timestamp(6) with time zone, deleted_reason varchar(100), rating float(53) not null, review_status tinyint check (review_status between 0 and 1), title varchar(50) not null, updated_at timestamp(6) with time zone, purchase_book_id bigint, primary key (id))
Hibernate: create table review_image (id bigint generated by default as identity, url varchar(50) not null, review_id bigint not null, primary key (id))
Hibernate: create table review_like (id bigint generated by default as identity, created_at timestamp(6) with time zone not null, member_id bigint, review_id bigint, primary key (id))
Hibernate: create table simple_review (content varchar(100) not null, created_at timestamp(6) with time zone not null, updated_at timestamp(6) with time zone, purchase_book_id bigint not null, primary key (purchase_book_id))
Hibernate: create table tag (id bigint generated by default as identity, name varchar(100) not null, primary key (id))
Hibernate: alter table if exists book_image drop constraint if exists UKrkpoh2q56k70tgcb8c2by0g37
Hibernate: alter table if exists book_image add constraint UKrkpoh2q56k70tgcb8c2by0g37 unique (url)
Hibernate: alter table if exists cart drop constraint if exists UK7dds3r67nkhxm9sbs9r5obd46
Hibernate: alter table if exists cart add constraint UK7dds3r67nkhxm9sbs9r5obd46 unique (member_id)
Hibernate: alter table if exists comment drop constraint if exists UK14fio2len8ouxyg2a1ixn2qhv
Hibernate: alter table if exists comment add constraint UK14fio2len8ouxyg2a1ixn2qhv unique (member_id)
Hibernate: alter table if exists purchase drop constraint if exists UK9yfe1qfmymvixk9undapnll08
Hibernate: alter table if exists purchase add constraint UK9yfe1qfmymvixk9undapnll08 unique (order_number)
Hibernate: alter table if exists purchase drop constraint if exists UK1w34ki8lo8aywns22fyl9g0ex
Hibernate: alter table if exists purchase add constraint UK1w34ki8lo8aywns22fyl9g0ex unique (point_record_id)
Hibernate: alter table if exists purchase_book drop constraint if exists UKq73u59c3kue49qmd7qfaqrggv
Hibernate: alter table if exists purchase_book add constraint UKq73u59c3kue49qmd7qfaqrggv unique (book_id)
Hibernate: alter table if exists review drop constraint if exists UK88tdjkfb4s2en3wgucmetsbk2
Hibernate: alter table if exists review add constraint UK88tdjkfb4s2en3wgucmetsbk2 unique (purchase_book_id)
Hibernate: alter table if exists review_image drop constraint if exists UKcqjchusv51i0of5p6noe5p17r
Hibernate: alter table if exists review_image add constraint UKcqjchusv51i0of5p6noe5p17r unique (url)
Hibernate: alter table if exists address add constraint FKcnw0s8hudme00qu71e3mqd5ih foreign key (member_id) references member
Hibernate: alter table if exists book_cart add constraint FKtmfgsp2mapbb50qerjo1ngm97 foreign key (book_id) references book
Hibernate: alter table if exists book_cart add constraint FKjirkaf305sr0bus6d1vow11jd foreign key (cart_id) references cart
Hibernate: alter table if exists book_category add constraint FKnyegcbpvce2mnmg26h0i856fd foreign key (book_id) references book
Hibernate: alter table if exists book_category add constraint FKam8llderp40mvbbwceqpu6l2s foreign key (category_id) references category
Hibernate: alter table if exists book_image add constraint FKh020sno0rk91annvrd960urno foreign key (book_id) references book
Hibernate: alter table if exists book_like add constraint FK7i3otcp1nj1ou9gdr7nv1lv0e foreign key (book_id) references book
Hibernate: alter table if exists book_like add constraint FK26d074yixkk7gfb7vd4g5glyj foreign key (member_id) references member
Hibernate: alter table if exists book_tag add constraint FKdrc33u5ufw8rdvajeveowgx7g foreign key (book_id) references book
Hibernate: alter table if exists book_tag add constraint FKrxw4xl05l6ns1763bq284e7m2 foreign key (tag_id) references tag
Hibernate: alter table if exists cart add constraint FKix170nytunweovf2v9137mx2o foreign key (member_id) references member
Hibernate: alter table if exists category add constraint FK2y94svpmqttx80mshyny85wqr foreign key (parent_id) references category
Hibernate: alter table if exists comment add constraint FKmrrrpi513ssu63i2783jyiv9m foreign key (member_id) references member
Hibernate: alter table if exists comment add constraint FKnf4ni761w29tmtgdxymmgvg8r foreign key (review_id) references review
Hibernate: alter table if exists coupon add constraint FK97ly69kp7juvoienofq00qaph foreign key (member_id) references member
Hibernate: alter table if exists member_auth add constraint FK66uc2xroefrsdkd5xihg5oyjf foreign key (auth_id) references auth
Hibernate: alter table if exists member_auth add constraint FKrft808ju8f7v8vhmei565dc4u foreign key (member_id) references member
Hibernate: alter table if exists payment add constraint FKkvolsaw3e4jg4ra05vu135cj9 foreign key (payment_type_id) references payment_type
Hibernate: alter table if exists payment add constraint FKmm2h9p8cpu4741lwxyn2fnpgg foreign key (purchase_id) references purchase
Hibernate: alter table if exists point_record add constraint FKirxm53it5dgmmu9bl6mepinnx foreign key (member_id) references member
Hibernate: alter table if exists purchase add constraint FKq9jpnu7wc1b02gnol85hw9su2 foreign key (member_id) references member
Hibernate: alter table if exists purchase add constraint FKb3ad9pb5elsb07gsxb7k8h6nh foreign key (point_record_id) references point_record
Hibernate: alter table if exists purchase_book add constraint FKdhpunimwngwnxolqft1svdwph foreign key (book_id) references book
Hibernate: alter table if exists purchase_book add constraint FKqreoqdobvpr39lkxlyv7n66st foreign key (purchase_id) references purchase
Hibernate: alter table if exists purchase_coupon add constraint FK9o3wf5e5gvu87f62vapfma8by foreign key (coupon_id) references coupon
Hibernate: alter table if exists purchase_coupon add constraint FKajhlo2cni1x4bjiisqi4i3620 foreign key (purchase_id) references purchase
Hibernate: alter table if exists refund add constraint FKn6hygqb7v8me2nthibetqp245 foreign key (purchase_id) references purchase
Hibernate: alter table if exists review add constraint FKphmamk3jpdov2m1ncrwenu8e2 foreign key (purchase_book_id) references purchase_book
Hibernate: alter table if exists review_image add constraint FK16wp089tx9nm0obc217gvdd6l foreign key (review_id) references review
Hibernate: alter table if exists review_like add constraint FKf19ep4u0vm5vietilw2kp9jo2 foreign key (member_id) references member
Hibernate: alter table if exists review_like add constraint FK68am9vk1s1e8n1v873meqkk0k foreign key (review_id) references review
Hibernate: alter table if exists simple_review add constraint FKhn2ol6nvdpxi1u79qcl0anoia foreign key (purchase_book_id) references purchase_book
2024-06-21T13:35:49.643+09:00  INFO 13201 --- [3runner-bookstore] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-21T13:35:49.725+09:00  INFO 13201 --- [3runner-bookstore] [           main] c.n.b.p.p.r.PurchaseBookRepositoryTest   : Started PurchaseBookRepositoryTest in 0.406 seconds (process running for 6.186)
2024-06-21T13:35:49.729+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: insert into book (author,created_at,description,isbn,packing,price,published_date,publisher,quantity,selling_price,title,view_count,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:VARCHAR) <- [Sample Author]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP_WITH_TIMEZONE) <- [2024-06-21T13:35:49.729620+09:00[Asia/Seoul]]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:CLOB) <- [This is a description of the sample book.]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:VARCHAR) <- [1234567890123]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:BOOLEAN) <- [true]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:INTEGER) <- [1500]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:TIMESTAMP_WITH_TIMEZONE) <- [2024-04-21T13:35:49.729167+09:00[Asia/Seoul]]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (8:VARCHAR) <- [Sample Publisher]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (9:INTEGER) <- [100]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (10:INTEGER) <- [1200]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (11:VARCHAR) <- [Sample Book Title]
2024-06-21T13:35:49.730+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (12:INTEGER) <- [0]
2024-06-21T13:35:49.731+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.732+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: select p1_0.id,p1_0.created_at,p1_0.delivery_price,m1_0.id,m1_0.age,m1_0.birthday,m1_0.created_at,m1_0.deleted_at,m1_0.email,m1_0.grade,m1_0.last_login_date,m1_0.modified_at,m1_0.name,m1_0.password,m1_0.phone,m1_0.point,m1_0.status,al1_0.member_id,al1_0.id,al1_0.city,al1_0.country,al1_0.name,al1_0.postal_code,al1_0.road,al1_0.state,p1_0.member_type,p1_0.order_number,p1_0.password,pr1_0.id,pr1_0.content,pr1_0.created_at,pr1_0.member_id,m3_0.id,m3_0.age,m3_0.birthday,m3_0.created_at,m3_0.deleted_at,m3_0.email,m3_0.grade,m3_0.last_login_date,m3_0.modified_at,m3_0.name,m3_0.password,m3_0.phone,m3_0.point,m3_0.status,pr1_0.member_point,pr1_0.remnant_point,p1_0.road,p1_0.status,p1_0.total_price from purchase p1_0 left join member m1_0 on m1_0.id=p1_0.member_id left join address al1_0 on m1_0.id=al1_0.member_id left join point_record pr1_0 on pr1_0.id=p1_0.point_record_id left join member m3_0 on m3_0.id=pr1_0.member_id where p1_0.id=?
2024-06-21T13:35:49.733+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
Hibernate: insert into purchase (created_at,delivery_price,member_id,member_type,order_number,password,point_record_id,road,status,total_price,id) values (?,?,?,?,?,?,?,?,?,?,default)
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:TIMESTAMP_WITH_TIMEZONE) <- [2024-06-21T13:35:49.731995+09:00[Asia/Seoul]]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:INTEGER) <- [10]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:BIGINT) <- [null]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:TINYINT) <- [MEMBER]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:UUID) <- [f6d7c9fe-83f2-45e9-921c-7dd2b181b011]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:VARCHAR) <- [null]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:BIGINT) <- [null]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (8:VARCHAR) <- [hhh]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (9:TINYINT) <- [SHIPPED]
2024-06-21T13:35:49.734+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (10:INTEGER) <- [10]
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
Hibernate: insert into purchase_book (book_id,price,purchase_id,quantity,id) values (?,?,?,?,default)
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:INTEGER) <- [1000]
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:BIGINT) <- [1]
2024-06-21T13:35:49.735+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:INTEGER) <- [10]
2024-06-21T13:35:49.736+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]
2024-06-21T13:35:49.736+09:00 TRACE 13201 --- [3runner-bookstore] [           main] o.s.t.i.TransactionInterceptor           : No need to create transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findByPurchaseIdAndBookId]: This method is not transactional.
Hibernate: select pb1_0.id,pb1_0.book_id,pb1_0.price,pb1_0.purchase_id,pb1_0.quantity from purchase_book pb1_0 where pb1_0.purchase_id=? and pb1_0.book_id=?
2024-06-21T13:35:49.738+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) <- [1]
2024-06-21T13:35:49.738+09:00 TRACE 13201 --- [3runner-bookstore] [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:BIGINT) <- [1]
2024-06-21T13:35:49.741+09:00  INFO 13201 --- [3runner-bookstore] [           main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
]]></system-out>
  </testcase>
</testsuite>